create type "public"."ApplicationRole" as enum ('admin', 'user');

create type "public"."Language" as enum ('en', 'ru', 'kaz');

create type "public"."LoginMethod" as enum ('email', 'mobileNumber', 'none');

create type "public"."NotificationType" as enum ('report', 'news', 'notification');

create type "public"."ReportStatus" as enum ('open', 'resolved', 'cancelled');

create type "public"."UserStatus" as enum ('created', 'invited', 'active', 'blocked', 'nonEmployee');

create table "public"."challenges" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "organisation" text not null,
    "views" integer not null,
    "image" text,
    "title" jsonb not null,
    "leaderText" jsonb not null,
    "bodyText" jsonb not null,
    "isCarouselElement" boolean not null,
    "hasLeaderboardButton" boolean not null,
    "endDate" timestamp with time zone not null
);


alter table "public"."challenges" enable row level security;

create table "public"."leaderboards" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone default now(),
    "organisation" text not null,
    "unit" text not null,
    "incidentDate" timestamp with time zone not null
);


alter table "public"."leaderboards" enable row level security;

create table "public"."news" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "organisation" text not null,
    "creator" uuid,
    "image" text,
    "views" integer not null,
    "title" jsonb not null,
    "bodyText" jsonb not null,
    "leaderText" jsonb not null
);


alter table "public"."news" enable row level security;

create table "public"."newsLikes" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "user" uuid,
    "news" bigint not null
);


alter table "public"."newsLikes" enable row level security;

create table "public"."notificationReads" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "user" uuid not null,
    "notification" bigint not null,
    "isRead" boolean not null
);


alter table "public"."notificationReads" enable row level security;

create table "public"."notifications" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "type" "NotificationType" not null,
    "organisation" text not null,
    "sender" uuid,
    "details" jsonb
);


alter table "public"."notifications" enable row level security;

create table "public"."organisationStructures" (
    "createdAt" timestamp with time zone not null default now(),
    "group" text[] not null,
    "company" text[] not null,
    "department" text[] not null,
    "division" text[] not null,
    "branch" text[] not null,
    "subBranch" text[] not null,
    "organisation" text not null
);


alter table "public"."organisationStructures" enable row level security;

create table "public"."organisations" (
    "id" text not null,
    "createdAt" timestamp with time zone not null,
    "isActive" boolean not null,
    "primaryColor" text not null,
    "applicationName" text not null,
    "iconUrl" text default ''::text,
    "logoUrl" text default ''::text,
    "termsUrl" text not null,
    "privacyUrl" text not null,
    "supportEmail" text not null,
    "manifestIcons" text[] default '{}'::text[]
);


alter table "public"."organisations" enable row level security;

create table "public"."reportUpdates" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "report" bigint not null,
    "user" uuid,
    "isSystemMessage" boolean not null,
    "message" text not null
);


alter table "public"."reportUpdates" enable row level security;

create table "public"."reports" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp without time zone not null,
    "type" text not null,
    "organisation" text not null,
    "title" text not null,
    "description" text not null,
    "placeOfObservation" text not null,
    "operationsStopped" boolean not null,
    "issueResolved" boolean not null,
    "yourActions" text not null,
    "yourSuggestion" text not null,
    "reportCategories" text[] not null,
    "image" text,
    "reportedToName" text,
    "reportedToPosition" text,
    "isDangerousSituation" boolean,
    "whatWeDid" text,
    "whatWeLearned" text,
    "reportStatus" "ReportStatus" not null,
    "updatedUsersIds" uuid[] not null,
    "reporter" uuid,
    "reportId" integer not null,
    "updatedAt" timestamp with time zone not null
);


alter table "public"."reports" enable row level security;

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp without time zone not null,
    "organisation" text,
    "accountSettings" jsonb not null,
    "challenges" jsonb not null,
    "leaderboard" jsonb not null,
    "myReports" jsonb not null,
    "news" jsonb not null,
    "organisationReports" jsonb not null,
    "profile" jsonb not null,
    "report" jsonb not null,
    "settings" jsonb not null,
    "userManagement" jsonb not null,
    "userProfile" jsonb not null,
    "name" text,
    "homeDashboard" jsonb
);


alter table "public"."roles" enable row level security;

create table "public"."userImportHistory" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "organisation" text,
    "importer" uuid,
    "fileName" text not null,
    "newUsersCount" bigint not null,
    "updatedUsersCount" bigint not null,
    "errorUsersCount" bigint not null,
    "nonEmployeeUsersCount" bigint not null
);


alter table "public"."userImportHistory" enable row level security;

create table "public"."userProfiles" (
    "id" uuid not null,
    "name" text not null,
    "jobTitle" text not null,
    "profileRating" smallint not null default '0'::smallint,
    "birthDay" date,
    "bloodType" text,
    "employmentType" text,
    "sex" text,
    "employmentDate" date,
    "introduction" text,
    "photoUrl" text,
    "smallPhotoUrl" text,
    "country" text,
    "city" text,
    "homeAddress" text,
    "email" text,
    "mobileNumber" text,
    "idNumber" text not null,
    "anthropometryHeight" text,
    "anthropometryClothesSize" text,
    "anthropometryShoeSize" text,
    "anthropometryHeadSize" text,
    "organisation" text,
    "workingEmail" text,
    "workingMobileNumber" text
);


alter table "public"."userProfiles" enable row level security;

create table "public"."userStructures" (
    "id" uuid not null,
    "group" text,
    "company" text not null,
    "department" text,
    "division" text,
    "branch" text,
    "subBranch" text
);


alter table "public"."userStructures" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "createdAt" timestamp with time zone not null default now(),
    "organisation" text,
    "language" text not null default 'en'::text,
    "role" bigint,
    "status" text not null default 'created'::text,
    "loginMethod" text not null default 'none'::text,
    "beforeBlockStatus" text,
    "isPushNotificationAllowed" boolean,
    "pushNotificationTokenId" text,
    "resetPasswordKey" text,
    "isPasswordChanged" boolean,
    "applicationRole" "ApplicationRole" not null default 'user'::"ApplicationRole",
    "lastLogin" timestamp with time zone,
    "test" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX challenges_pkey ON public.challenges USING btree (id);

CREATE UNIQUE INDEX leaderboards_pkey ON public.leaderboards USING btree (id);

CREATE UNIQUE INDEX "newsLikes_pkey" ON public."newsLikes" USING btree (id);

CREATE UNIQUE INDEX news_pkey ON public.news USING btree (id);

CREATE UNIQUE INDEX "notificationReads_pkey" ON public."notificationReads" USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

CREATE UNIQUE INDEX organisations_pkey ON public.organisations USING btree (id);

CREATE UNIQUE INDEX "reportUpdates_pkey" ON public."reportUpdates" USING btree (id);

CREATE UNIQUE INDEX reports_pkey ON public.reports USING btree (id);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX structure_pkey ON public."organisationStructures" USING btree (organisation);

CREATE UNIQUE INDEX structures_organisation_key ON public."organisationStructures" USING btree (organisation);

CREATE UNIQUE INDEX "userImportHistory_pkey" ON public."userImportHistory" USING btree (id);

CREATE UNIQUE INDEX "userInfo_pkey" ON public."userProfiles" USING btree (id);

CREATE UNIQUE INDEX "userStructures_pkey" ON public."userStructures" USING btree (id);

CREATE UNIQUE INDEX users_id_key ON public.users USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."challenges" add constraint "challenges_pkey" PRIMARY KEY using index "challenges_pkey";

alter table "public"."leaderboards" add constraint "leaderboards_pkey" PRIMARY KEY using index "leaderboards_pkey";

alter table "public"."news" add constraint "news_pkey" PRIMARY KEY using index "news_pkey";

alter table "public"."newsLikes" add constraint "newsLikes_pkey" PRIMARY KEY using index "newsLikes_pkey";

alter table "public"."notificationReads" add constraint "notificationReads_pkey" PRIMARY KEY using index "notificationReads_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."organisationStructures" add constraint "structure_pkey" PRIMARY KEY using index "structure_pkey";

alter table "public"."organisations" add constraint "organisations_pkey" PRIMARY KEY using index "organisations_pkey";

alter table "public"."reportUpdates" add constraint "reportUpdates_pkey" PRIMARY KEY using index "reportUpdates_pkey";

alter table "public"."reports" add constraint "reports_pkey" PRIMARY KEY using index "reports_pkey";

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."userImportHistory" add constraint "userImportHistory_pkey" PRIMARY KEY using index "userImportHistory_pkey";

alter table "public"."userProfiles" add constraint "userInfo_pkey" PRIMARY KEY using index "userInfo_pkey";

alter table "public"."userStructures" add constraint "userStructures_pkey" PRIMARY KEY using index "userStructures_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."challenges" add constraint "challenges_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE not valid;

alter table "public"."challenges" validate constraint "challenges_organisation_fkey";

alter table "public"."leaderboards" add constraint "leaderboards_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."leaderboards" validate constraint "leaderboards_organisation_fkey";

alter table "public"."news" add constraint "news_creator_fkey" FOREIGN KEY (creator) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."news" validate constraint "news_creator_fkey";

alter table "public"."news" add constraint "news_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE not valid;

alter table "public"."news" validate constraint "news_organisation_fkey";

alter table "public"."newsLikes" add constraint "newsLikes_news_fkey" FOREIGN KEY (news) REFERENCES news(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."newsLikes" validate constraint "newsLikes_news_fkey";

alter table "public"."newsLikes" add constraint "newsLikes_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."newsLikes" validate constraint "newsLikes_user_fkey";

alter table "public"."notificationReads" add constraint "notificationReads_notification_fkey" FOREIGN KEY (notification) REFERENCES notifications(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notificationReads" validate constraint "notificationReads_notification_fkey";

alter table "public"."notificationReads" add constraint "notificationReads_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notificationReads" validate constraint "notificationReads_user_fkey";

alter table "public"."notifications" add constraint "notifications_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_organisation_fkey";

alter table "public"."notifications" add constraint "notifications_sender_fkey" FOREIGN KEY (sender) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."notifications" validate constraint "notifications_sender_fkey";

alter table "public"."organisationStructures" add constraint "organisationStructures_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."organisationStructures" validate constraint "organisationStructures_organisation_fkey";

alter table "public"."organisationStructures" add constraint "structures_organisation_key" UNIQUE using index "structures_organisation_key";

alter table "public"."reportUpdates" add constraint "reportUpdates_report_fkey" FOREIGN KEY (report) REFERENCES reports(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reportUpdates" validate constraint "reportUpdates_report_fkey";

alter table "public"."reportUpdates" add constraint "reportUpdates_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."reportUpdates" validate constraint "reportUpdates_user_fkey";

alter table "public"."reports" add constraint "reports_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reports" validate constraint "reports_organisation_fkey";

alter table "public"."reports" add constraint "reports_reporter_fkey" FOREIGN KEY (reporter) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."reports" validate constraint "reports_reporter_fkey";

alter table "public"."roles" add constraint "roles_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."roles" validate constraint "roles_organisation_fkey";

alter table "public"."userImportHistory" add constraint "userImportHistory_importer_fkey" FOREIGN KEY (importer) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."userImportHistory" validate constraint "userImportHistory_importer_fkey";

alter table "public"."userImportHistory" add constraint "userImportHistory_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."userImportHistory" validate constraint "userImportHistory_organisation_fkey";

alter table "public"."userProfiles" add constraint "userProfiles_id_fkey" FOREIGN KEY (id) REFERENCES users(id) not valid;

alter table "public"."userProfiles" validate constraint "userProfiles_id_fkey";

alter table "public"."userProfiles" add constraint "userProfiles_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) not valid;

alter table "public"."userProfiles" validate constraint "userProfiles_organisation_fkey";

alter table "public"."userStructures" add constraint "userStructures_id_fkey" FOREIGN KEY (id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."userStructures" validate constraint "userStructures_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

alter table "public"."users" add constraint "users_id_key" UNIQUE using index "users_id_key";

alter table "public"."users" add constraint "users_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON UPDATE CASCADE not valid;

alter table "public"."users" validate constraint "users_organisation_fkey";

alter table "public"."users" add constraint "users_role_fkey" FOREIGN KEY (role) REFERENCES roles(id) ON UPDATE CASCADE not valid;

alter table "public"."users" validate constraint "users_role_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.delete_oldest_notification()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
IF (SELECT COUNT(*) FROM "notificationReads" WHERE "notificationReads".user = NEW.user) > 49 THEN
    DELETE FROM "notificationReads"
    WHERE ("notificationReads".user, "createdAt") IN (
            SELECT "notificationReads".user, "notificationReads"."createdAt"
            FROM "notificationReads"
            WHERE "notificationReads".user = NEW.user
            ORDER BY "createdAt"
            LIMIT (SELECT COUNT(*) - 49 FROM "notificationReads" WHERE "notificationReads".user = NEW.user)
        );

    END IF;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_report_analytics_table_data(organisation_id character varying, start_date timestamp without time zone, end_date timestamp without time zone)
 RETURNS TABLE(id bigint, "reportId" integer, "createdAt" timestamp without time zone, description text, image text, "isDangerousSituation" boolean, "issueResolved" boolean, "operationsStopped" boolean, organisation text, "placeOfObservation" text, "reportCategories" text[], "reportStatus" "ReportStatus", "reportedToName" text, "reportedToPosition" text, reporter uuid, title text, type text, "updatedAt" timestamp with time zone, "updatedUsersIds" uuid[], "whatWeDid" text, "whatWeLearned" text, "yourActions" text, "yourSuggestion" text, "user" jsonb)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY 
    SELECT 
        "reports".id,
        "reports"."reportId",
        "reports"."createdAt",
        "reports"."description",
        "reports".image,
        "reports"."isDangerousSituation",
        "reports"."issueResolved",
        "reports"."operationsStopped",
        "reports".organisation,
        "reports"."placeOfObservation",
        "reports"."reportCategories",
        "reports"."reportStatus",
        "reports"."reportedToName",
        "reports"."reportedToPosition",
        "reports".reporter,
        "reports".title,
        "reports".type,
        "reports"."updatedAt",
        "reports"."updatedUsersIds",
        "reports"."whatWeDid",
        "reports"."whatWeLearned",
        "reports"."yourActions",
        "reports"."yourSuggestion",
        jsonb_build_object(
            'id', u.id,
            'userStructure', us.*,
            'userProfile', up.*
        ) AS "user"
    FROM 
       "reports" 
    INNER JOIN 
        "users" AS u ON "reports".reporter = u.id
    INNER JOIN 
        "userStructures" AS us ON u.id = us.id
    INNER JOIN 
        "userProfiles" AS up ON u.id = up.id
    WHERE 
        "reports"."organisation" = organisation_id
        AND "reports"."createdAt" > start_date
        AND "reports"."createdAt" < end_date
        AND "reports"."reportStatus" <> 'cancelled';
END;
$function$
;

CREATE OR REPLACE FUNCTION public.getorgbynewsid(_newsid bigint, OUT org_id text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
 begin
  select organisation from news where id = _newsId
  into org_id;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.getorgbyreportid(_reportid bigint, OUT org_id text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
 begin
  select organisation from reports where id = _reportId
  into org_id;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.getorgbyuserid(_userid uuid, OUT org_id text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
 begin
  select organisation from users where id = _userId
  into org_id;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.getreporterbyreportid(_reportid bigint, OUT user_id uuid)
 RETURNS uuid
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
 begin
  select reporter from reports where id = _reportId
  into user_id;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.getrolebyuser(_userid uuid, OUT roleid bigint)
 RETURNS bigint
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
  BEGIN
    EXECUTE 'SELECT role from users WHERE id = $1;'
    INTO roleId
    USING _userId;
  END 
$function$
;

CREATE OR REPLACE FUNCTION public.getuserpermissionsobject(_userid uuid, _column text, OUT permissions jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 IMMUTABLE STRICT SECURITY DEFINER
AS $function$ 
declare roleId int;
 begin
  select public.getrolebyuser(_userId) into roleId;
  select public.getuserrolepermissions(roleId, _column) into permissions;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.getuserrolepermissions(_roleid bigint, _permission_path character varying, OUT result jsonb)
 RETURNS jsonb
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$ 
 BEGIN 
 EXECUTE 'SELECT '|| quote_ident(_permission_path) ||' FROM roles WHERE id = $1'
  INTO result
  USING _roleId;
END $function$
;

CREATE OR REPLACE FUNCTION public.isuseradmin(_userid uuid, OUT isadmin boolean)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE STRICT SECURITY DEFINER
AS $function$
    DECLARE role text;
  BEGIN
    EXECUTE 'SELECT "applicationRole" from users WHERE id = $1;'
    INTO role
    USING _userId;
    isAdmin := role = 'admin';
  END 
$function$
;

CREATE OR REPLACE FUNCTION public.isuserinorg(_orgid text, _userid uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE STRICT SECURITY DEFINER
AS $function$
declare userOrgId text;
begin
  select organisation from users INTO userOrgId where id = _userId;
  if (_orgId = userOrgId) then 
  return true;
  end if;
  return false;
end
$function$
;

CREATE OR REPLACE FUNCTION public.notificationrecordexistsforuser(_notificationid bigint, _userid uuid, OUT _exists boolean)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
 begin
  select exists (select 1 from "notificationReads" where notification = _notificationId and "notificationReads".user = _userId limit 1)
  into _exists;
  end
$function$
;

CREATE OR REPLACE FUNCTION public.org_row_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  IF NEW.id <> OLD.id THEN
    RAISE EXCEPTION 'changing "ID" is not allowed';
  END IF;
  IF NEW."createdAt" <> OLD."createdAt" THEN
    RAISE EXCEPTION 'changing "createdAt" is not allowed';
  END IF;
  IF NEW."isActive" <> OLD."isActive" THEN
    RAISE EXCEPTION 'changing "isActive" is not allowed';
  END IF;
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.org_update_rls(userid uuid, newobject organisations)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
declare userSettings jsonb;
declare brandingUpdatePermissions boolean := false;
declare brandingLoginpagePermissions boolean := false;
declare oldObject organisations;
begin
  IF (SELECT public.isuseradmin(auth.uid()) AS isAdmin) = true THEN return TRUE;
  END IF;
  oldObject := (SELECT * FROM organisations as o WHERE o.id = newObject.id);
  userSettings := (SELECT public.getuserpermissionsobject(auth.uid(), 'settings'));
  brandingUpdatePermissions := userSettings::json#>'{branding, update}';
  IF (
    (newObject."primaryColor" <> oldObject."primaryColor") OR
    (newObject."applicationName" <> oldObject."applicationName") OR
    (newObject."iconUrl" <> oldObject."iconUrl") OR
    (newObject."logoUrl" <> oldObject."logoUrl") OR
    (newObject."manifestIcons" <> oldObject."manifestIcons") AND
    brandingUpdatePermissions = true) then return true;
    END IF;
  brandingLoginpagePermissions := userSettings::json#>'{loginPage, update}';
  IF (
    (newObject."termsUrl" <> oldObject."termsUrl") or
    (newObject."privacyUrl" <> oldObject."privacyUrl") or 
    (newObject."supportEmail" <> oldObject."supportEmail") and
    brandingLoginpagePermissions = true) then return true;
  END IF;
  return false;
end
$function$
;

CREATE OR REPLACE FUNCTION public.reports_by_day(start_date date, end_date date)
 RETURNS TABLE(report_day date, count integer)
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
BEGIN
  RETURN QUERY
  SELECT date_trunc('day', "createdAt")::DATE as report_day, COUNT(*)
  FROM reports
  WHERE "createdAt" >= start_date AND "createdAt" <= end_date
  GROUP BY 1
  ORDER BY 1;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.reports_by_day2(start_date date, end_date date)
 RETURNS TABLE(report_day date, count integer)
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
BEGIN
  RETURN QUERY
  SELECT date_trunc('day', "createdAt")::DATE as report_day, COUNT(*)::INT as count
  FROM reports
  WHERE "createdAt" >= start_date AND "createdAt" <= end_date
  GROUP BY 1
  ORDER BY 1;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.reports_by_day3(start_date date, end_date date)
 RETURNS TABLE(report_day date, count integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT date_trunc('day', "createdAt")::DATE as report_day, COUNT(*)::INT as count
  FROM reports
  WHERE "createdAt" >= start_date AND "createdAt" <= end_date
  GROUP BY 1
  ORDER BY 1;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.testing(start_date timestamp with time zone, end_date timestamp with time zone)
 RETURNS void
 LANGUAGE sql
AS $function$CREATE OR REPLACE FUNCTION reports_by_day(start_date DATE, end_date DATE)
RETURNS TABLE(report_day DATE, count INTEGER) AS $$
BEGIN
  RETURN QUERY
  SELECT date_trunc('day', "createdAt")::DATE as report_day, COUNT(*)
  FROM reports
  WHERE "createdAt" >= start_date AND "createdAt" <= end_date
  GROUP BY 1
  ORDER BY 1;
END;
$$ LANGUAGE plpgsql;$function$
;

create or replace view "public"."usersManagement" as  SELECT u.id,
    u."lastLogin",
    u."applicationRole",
    u.organisation,
    u.status,
    u."loginMethod",
    up.name,
    up."idNumber",
    up."jobTitle",
    up."smallPhotoUrl",
    up.email,
    up."mobileNumber",
    r.name AS role,
    us.company,
    lower(up.name) AS "orderName",
    lower(up."jobTitle") AS "orderJobTitle",
    lower(us.company) AS "orderCompany",
    lower(r.name) AS "orderRole",
    lower(((((((((up.name || ' '::text) || up."idNumber") || ' '::text) || up."jobTitle") || ' '::text) || up.email) || ' '::text) || up."mobileNumber")) AS search,
    up."profileRating",
    up."photoUrl",
    up."employmentType"
   FROM (((users u
     JOIN "userProfiles" up ON ((u.id = up.id)))
     JOIN roles r ON ((u.role = r.id)))
     JOIN "userStructures" us ON ((u.id = us.id)));


grant delete on table "public"."challenges" to "anon";

grant insert on table "public"."challenges" to "anon";

grant references on table "public"."challenges" to "anon";

grant select on table "public"."challenges" to "anon";

grant trigger on table "public"."challenges" to "anon";

grant truncate on table "public"."challenges" to "anon";

grant update on table "public"."challenges" to "anon";

grant delete on table "public"."challenges" to "authenticated";

grant insert on table "public"."challenges" to "authenticated";

grant references on table "public"."challenges" to "authenticated";

grant select on table "public"."challenges" to "authenticated";

grant trigger on table "public"."challenges" to "authenticated";

grant truncate on table "public"."challenges" to "authenticated";

grant update on table "public"."challenges" to "authenticated";

grant delete on table "public"."challenges" to "service_role";

grant insert on table "public"."challenges" to "service_role";

grant references on table "public"."challenges" to "service_role";

grant select on table "public"."challenges" to "service_role";

grant trigger on table "public"."challenges" to "service_role";

grant truncate on table "public"."challenges" to "service_role";

grant update on table "public"."challenges" to "service_role";

grant delete on table "public"."leaderboards" to "anon";

grant insert on table "public"."leaderboards" to "anon";

grant references on table "public"."leaderboards" to "anon";

grant select on table "public"."leaderboards" to "anon";

grant trigger on table "public"."leaderboards" to "anon";

grant truncate on table "public"."leaderboards" to "anon";

grant update on table "public"."leaderboards" to "anon";

grant delete on table "public"."leaderboards" to "authenticated";

grant insert on table "public"."leaderboards" to "authenticated";

grant references on table "public"."leaderboards" to "authenticated";

grant select on table "public"."leaderboards" to "authenticated";

grant trigger on table "public"."leaderboards" to "authenticated";

grant truncate on table "public"."leaderboards" to "authenticated";

grant update on table "public"."leaderboards" to "authenticated";

grant delete on table "public"."leaderboards" to "service_role";

grant insert on table "public"."leaderboards" to "service_role";

grant references on table "public"."leaderboards" to "service_role";

grant select on table "public"."leaderboards" to "service_role";

grant trigger on table "public"."leaderboards" to "service_role";

grant truncate on table "public"."leaderboards" to "service_role";

grant update on table "public"."leaderboards" to "service_role";

grant delete on table "public"."news" to "anon";

grant insert on table "public"."news" to "anon";

grant references on table "public"."news" to "anon";

grant select on table "public"."news" to "anon";

grant trigger on table "public"."news" to "anon";

grant truncate on table "public"."news" to "anon";

grant update on table "public"."news" to "anon";

grant delete on table "public"."news" to "authenticated";

grant insert on table "public"."news" to "authenticated";

grant references on table "public"."news" to "authenticated";

grant select on table "public"."news" to "authenticated";

grant trigger on table "public"."news" to "authenticated";

grant truncate on table "public"."news" to "authenticated";

grant update on table "public"."news" to "authenticated";

grant delete on table "public"."news" to "service_role";

grant insert on table "public"."news" to "service_role";

grant references on table "public"."news" to "service_role";

grant select on table "public"."news" to "service_role";

grant trigger on table "public"."news" to "service_role";

grant truncate on table "public"."news" to "service_role";

grant update on table "public"."news" to "service_role";

grant delete on table "public"."newsLikes" to "anon";

grant insert on table "public"."newsLikes" to "anon";

grant references on table "public"."newsLikes" to "anon";

grant select on table "public"."newsLikes" to "anon";

grant trigger on table "public"."newsLikes" to "anon";

grant truncate on table "public"."newsLikes" to "anon";

grant update on table "public"."newsLikes" to "anon";

grant delete on table "public"."newsLikes" to "authenticated";

grant insert on table "public"."newsLikes" to "authenticated";

grant references on table "public"."newsLikes" to "authenticated";

grant select on table "public"."newsLikes" to "authenticated";

grant trigger on table "public"."newsLikes" to "authenticated";

grant truncate on table "public"."newsLikes" to "authenticated";

grant update on table "public"."newsLikes" to "authenticated";

grant delete on table "public"."newsLikes" to "service_role";

grant insert on table "public"."newsLikes" to "service_role";

grant references on table "public"."newsLikes" to "service_role";

grant select on table "public"."newsLikes" to "service_role";

grant trigger on table "public"."newsLikes" to "service_role";

grant truncate on table "public"."newsLikes" to "service_role";

grant update on table "public"."newsLikes" to "service_role";

grant delete on table "public"."notificationReads" to "anon";

grant insert on table "public"."notificationReads" to "anon";

grant references on table "public"."notificationReads" to "anon";

grant select on table "public"."notificationReads" to "anon";

grant trigger on table "public"."notificationReads" to "anon";

grant truncate on table "public"."notificationReads" to "anon";

grant update on table "public"."notificationReads" to "anon";

grant delete on table "public"."notificationReads" to "authenticated";

grant insert on table "public"."notificationReads" to "authenticated";

grant references on table "public"."notificationReads" to "authenticated";

grant select on table "public"."notificationReads" to "authenticated";

grant trigger on table "public"."notificationReads" to "authenticated";

grant truncate on table "public"."notificationReads" to "authenticated";

grant update on table "public"."notificationReads" to "authenticated";

grant delete on table "public"."notificationReads" to "service_role";

grant insert on table "public"."notificationReads" to "service_role";

grant references on table "public"."notificationReads" to "service_role";

grant select on table "public"."notificationReads" to "service_role";

grant trigger on table "public"."notificationReads" to "service_role";

grant truncate on table "public"."notificationReads" to "service_role";

grant update on table "public"."notificationReads" to "service_role";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

grant delete on table "public"."organisationStructures" to "anon";

grant insert on table "public"."organisationStructures" to "anon";

grant references on table "public"."organisationStructures" to "anon";

grant select on table "public"."organisationStructures" to "anon";

grant trigger on table "public"."organisationStructures" to "anon";

grant truncate on table "public"."organisationStructures" to "anon";

grant update on table "public"."organisationStructures" to "anon";

grant delete on table "public"."organisationStructures" to "authenticated";

grant insert on table "public"."organisationStructures" to "authenticated";

grant references on table "public"."organisationStructures" to "authenticated";

grant select on table "public"."organisationStructures" to "authenticated";

grant trigger on table "public"."organisationStructures" to "authenticated";

grant truncate on table "public"."organisationStructures" to "authenticated";

grant update on table "public"."organisationStructures" to "authenticated";

grant delete on table "public"."organisationStructures" to "service_role";

grant insert on table "public"."organisationStructures" to "service_role";

grant references on table "public"."organisationStructures" to "service_role";

grant select on table "public"."organisationStructures" to "service_role";

grant trigger on table "public"."organisationStructures" to "service_role";

grant truncate on table "public"."organisationStructures" to "service_role";

grant update on table "public"."organisationStructures" to "service_role";

grant delete on table "public"."organisations" to "anon";

grant insert on table "public"."organisations" to "anon";

grant references on table "public"."organisations" to "anon";

grant select on table "public"."organisations" to "anon";

grant trigger on table "public"."organisations" to "anon";

grant truncate on table "public"."organisations" to "anon";

grant update on table "public"."organisations" to "anon";

grant delete on table "public"."organisations" to "authenticated";

grant insert on table "public"."organisations" to "authenticated";

grant references on table "public"."organisations" to "authenticated";

grant select on table "public"."organisations" to "authenticated";

grant trigger on table "public"."organisations" to "authenticated";

grant truncate on table "public"."organisations" to "authenticated";

grant update on table "public"."organisations" to "authenticated";

grant delete on table "public"."organisations" to "service_role";

grant insert on table "public"."organisations" to "service_role";

grant references on table "public"."organisations" to "service_role";

grant select on table "public"."organisations" to "service_role";

grant trigger on table "public"."organisations" to "service_role";

grant truncate on table "public"."organisations" to "service_role";

grant update on table "public"."organisations" to "service_role";

grant delete on table "public"."reportUpdates" to "anon";

grant insert on table "public"."reportUpdates" to "anon";

grant references on table "public"."reportUpdates" to "anon";

grant select on table "public"."reportUpdates" to "anon";

grant trigger on table "public"."reportUpdates" to "anon";

grant truncate on table "public"."reportUpdates" to "anon";

grant update on table "public"."reportUpdates" to "anon";

grant delete on table "public"."reportUpdates" to "authenticated";

grant insert on table "public"."reportUpdates" to "authenticated";

grant references on table "public"."reportUpdates" to "authenticated";

grant select on table "public"."reportUpdates" to "authenticated";

grant trigger on table "public"."reportUpdates" to "authenticated";

grant truncate on table "public"."reportUpdates" to "authenticated";

grant update on table "public"."reportUpdates" to "authenticated";

grant delete on table "public"."reportUpdates" to "service_role";

grant insert on table "public"."reportUpdates" to "service_role";

grant references on table "public"."reportUpdates" to "service_role";

grant select on table "public"."reportUpdates" to "service_role";

grant trigger on table "public"."reportUpdates" to "service_role";

grant truncate on table "public"."reportUpdates" to "service_role";

grant update on table "public"."reportUpdates" to "service_role";

grant delete on table "public"."reports" to "anon";

grant insert on table "public"."reports" to "anon";

grant references on table "public"."reports" to "anon";

grant select on table "public"."reports" to "anon";

grant trigger on table "public"."reports" to "anon";

grant truncate on table "public"."reports" to "anon";

grant update on table "public"."reports" to "anon";

grant delete on table "public"."reports" to "authenticated";

grant insert on table "public"."reports" to "authenticated";

grant references on table "public"."reports" to "authenticated";

grant select on table "public"."reports" to "authenticated";

grant trigger on table "public"."reports" to "authenticated";

grant truncate on table "public"."reports" to "authenticated";

grant update on table "public"."reports" to "authenticated";

grant delete on table "public"."reports" to "service_role";

grant insert on table "public"."reports" to "service_role";

grant references on table "public"."reports" to "service_role";

grant select on table "public"."reports" to "service_role";

grant trigger on table "public"."reports" to "service_role";

grant truncate on table "public"."reports" to "service_role";

grant update on table "public"."reports" to "service_role";

grant delete on table "public"."roles" to "anon";

grant insert on table "public"."roles" to "anon";

grant references on table "public"."roles" to "anon";

grant select on table "public"."roles" to "anon";

grant trigger on table "public"."roles" to "anon";

grant truncate on table "public"."roles" to "anon";

grant update on table "public"."roles" to "anon";

grant delete on table "public"."roles" to "authenticated";

grant insert on table "public"."roles" to "authenticated";

grant references on table "public"."roles" to "authenticated";

grant select on table "public"."roles" to "authenticated";

grant trigger on table "public"."roles" to "authenticated";

grant truncate on table "public"."roles" to "authenticated";

grant update on table "public"."roles" to "authenticated";

grant delete on table "public"."roles" to "service_role";

grant insert on table "public"."roles" to "service_role";

grant references on table "public"."roles" to "service_role";

grant select on table "public"."roles" to "service_role";

grant trigger on table "public"."roles" to "service_role";

grant truncate on table "public"."roles" to "service_role";

grant update on table "public"."roles" to "service_role";

grant delete on table "public"."userImportHistory" to "anon";

grant insert on table "public"."userImportHistory" to "anon";

grant references on table "public"."userImportHistory" to "anon";

grant select on table "public"."userImportHistory" to "anon";

grant trigger on table "public"."userImportHistory" to "anon";

grant truncate on table "public"."userImportHistory" to "anon";

grant update on table "public"."userImportHistory" to "anon";

grant delete on table "public"."userImportHistory" to "authenticated";

grant insert on table "public"."userImportHistory" to "authenticated";

grant references on table "public"."userImportHistory" to "authenticated";

grant select on table "public"."userImportHistory" to "authenticated";

grant trigger on table "public"."userImportHistory" to "authenticated";

grant truncate on table "public"."userImportHistory" to "authenticated";

grant update on table "public"."userImportHistory" to "authenticated";

grant delete on table "public"."userImportHistory" to "service_role";

grant insert on table "public"."userImportHistory" to "service_role";

grant references on table "public"."userImportHistory" to "service_role";

grant select on table "public"."userImportHistory" to "service_role";

grant trigger on table "public"."userImportHistory" to "service_role";

grant truncate on table "public"."userImportHistory" to "service_role";

grant update on table "public"."userImportHistory" to "service_role";

grant delete on table "public"."userProfiles" to "anon";

grant insert on table "public"."userProfiles" to "anon";

grant references on table "public"."userProfiles" to "anon";

grant select on table "public"."userProfiles" to "anon";

grant trigger on table "public"."userProfiles" to "anon";

grant truncate on table "public"."userProfiles" to "anon";

grant update on table "public"."userProfiles" to "anon";

grant delete on table "public"."userProfiles" to "authenticated";

grant insert on table "public"."userProfiles" to "authenticated";

grant references on table "public"."userProfiles" to "authenticated";

grant select on table "public"."userProfiles" to "authenticated";

grant trigger on table "public"."userProfiles" to "authenticated";

grant truncate on table "public"."userProfiles" to "authenticated";

grant update on table "public"."userProfiles" to "authenticated";

grant delete on table "public"."userProfiles" to "service_role";

grant insert on table "public"."userProfiles" to "service_role";

grant references on table "public"."userProfiles" to "service_role";

grant select on table "public"."userProfiles" to "service_role";

grant trigger on table "public"."userProfiles" to "service_role";

grant truncate on table "public"."userProfiles" to "service_role";

grant update on table "public"."userProfiles" to "service_role";

grant delete on table "public"."userStructures" to "anon";

grant insert on table "public"."userStructures" to "anon";

grant references on table "public"."userStructures" to "anon";

grant select on table "public"."userStructures" to "anon";

grant trigger on table "public"."userStructures" to "anon";

grant truncate on table "public"."userStructures" to "anon";

grant update on table "public"."userStructures" to "anon";

grant delete on table "public"."userStructures" to "authenticated";

grant insert on table "public"."userStructures" to "authenticated";

grant references on table "public"."userStructures" to "authenticated";

grant select on table "public"."userStructures" to "authenticated";

grant trigger on table "public"."userStructures" to "authenticated";

grant truncate on table "public"."userStructures" to "authenticated";

grant update on table "public"."userStructures" to "authenticated";

grant delete on table "public"."userStructures" to "service_role";

grant insert on table "public"."userStructures" to "service_role";

grant references on table "public"."userStructures" to "service_role";

grant select on table "public"."userStructures" to "service_role";

grant trigger on table "public"."userStructures" to "service_role";

grant truncate on table "public"."userStructures" to "service_role";

grant update on table "public"."userStructures" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "challenges_read"
on "public"."challenges"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'challenges'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean)));


create policy "leaderboard_read"
on "public"."leaderboards"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'leaderboard'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean)));


create policy "news_read"
on "public"."news"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'news'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean)));


create policy "newslikes_read"
on "public"."newsLikes"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (((((getuserpermissionsobject(auth.uid(), 'news'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean AND isuserinorg(getorgbynewsid(news), auth.uid()))));


create policy "notificationreads_read"
on "public"."notificationReads"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR ("user" = auth.uid())));


create policy "notification_read"
on "public"."notifications"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND notificationrecordexistsforuser(id, auth.uid()) AND (((type = 'news'::"NotificationType") AND ((((getuserpermissionsobject(auth.uid(), 'news'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean) OR ((type = 'report'::"NotificationType") AND ((((getuserpermissionsobject(auth.uid(), 'organisationReports'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean) OR (type = 'notification'::"NotificationType")))));


create policy "orgstructure_read"
on "public"."organisationStructures"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR isuserinorg(organisation, auth.uid())));


create policy "org_read"
on "public"."organisations"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR isuserinorg(id, auth.uid())));


create policy "reportupdates_read"
on "public"."reportUpdates"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR ((((((getuserpermissionsobject(auth.uid(), 'myReports'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean AND ((auth.uid() = "user") OR (getreporterbyreportid(report) = auth.uid()))) OR (((((getuserpermissionsobject(auth.uid(), 'organisationReports'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean AND isuserinorg(getorgbyreportid(report), auth.uid())))));


create policy "reports_read"
on "public"."reports"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (((reporter = auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'myReports'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean) OR (isuserinorg(organisation, auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'organisationReports'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean))));


create policy "roles_read"
on "public"."roles"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR isuserinorg(organisation, auth.uid())));


create policy "userimporthistory_read"
on "public"."userImportHistory"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((((getuserpermissionsobject(auth.uid(), 'userManagement'::text))::json #> '{import}'::text[]) ->> 'read'::text))::boolean)));


create policy "userprofiles_read"
on "public"."userProfiles"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((id = auth.uid()) OR ((((getuserpermissionsobject(auth.uid(), 'userProfile'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean OR ((((getuserpermissionsobject(auth.uid(), 'userManagement'::text))::json #> '{users}'::text[]) ->> 'read'::text))::boolean))));


create policy "userstructures_read"
on "public"."userStructures"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(getorgbyuserid(id), auth.uid()) AND ((id = auth.uid()) OR ((((getuserpermissionsobject(auth.uid(), 'userProfile'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean OR ((((getuserpermissionsobject(auth.uid(), 'userManagement'::text))::json #> '{users}'::text[]) ->> 'read'::text))::boolean))));


create policy "users_read"
on "public"."users"
as permissive
for select
to authenticated
using ((isuseradmin(auth.uid()) OR (isuserinorg(organisation, auth.uid()) AND ((id = auth.uid()) OR ((((getuserpermissionsobject(auth.uid(), 'userProfile'::text))::json #> '{default}'::text[]) ->> 'read'::text))::boolean OR ((((getuserpermissionsobject(auth.uid(), 'userManagement'::text))::json #> '{users}'::text[]) ->> 'read'::text))::boolean))));


CREATE TRIGGER before_insert_notification BEFORE INSERT ON public."notificationReads" FOR EACH ROW EXECUTE FUNCTION delete_oldest_notification();

CREATE TRIGGER org_update_trigger BEFORE UPDATE ON public.organisations FOR EACH ROW EXECUTE FUNCTION org_row_update();


